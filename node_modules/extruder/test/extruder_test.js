var extruder = require('../lib/extruder');

exports['extruder'] = {
  'map over src/dest pairs with a provided method': function (test) {
    test.expect(1);

    var input = [
      { src: ['input1', 'input2'],
        dest: 'whatever'
      },
      { src: ['input1', 'input2', 'input3'],
        dest: 'whatever'
      },
    ];
    var expected = [
      { src: ['input1MAPPED', 'input2MAPPED'],
        dest: 'whatever'
      },
      { src: ['input1MAPPED', 'input2MAPPED', 'input3MAPPED'],
        dest: 'whatever'
      },
    ];

    var result = extruder.map(input, function (source, dest) {
      return source+'MAPPED';
    });
    result.then(function(result) {
      test.deepEqual(result, expected);
      test.done();
    });
  },

  'reduce src/dest pairs with a provided method': function (test) {
    test.expect(1);

    var input = [
      { src: ['input1', 'input2'],
        dest: 'whatever'
      },
      { src: ['input1', 'input2', 'input3'],
        dest: 'whatever'
      },
    ];
    var expected = [
      { src: 'input1-input2',
        dest: 'whatever'
      },
      { src: 'input1-input2-input3',
        dest: 'whatever'
      },
    ];

    var result = extruder.reduce(input, function (sources, dest) {
        return sources.join('-');
    });
    result.then(function (result) {
      test.deepEqual(result, expected);
      test.done();
    });
  },


  'allow changing context with map': function (test) {
    test.expect(2);

    var context = { value: 'override' };

    // test for source only arrrays
    var result = extruder.map(['input'], function (source, dest) {
      return this.value;
    }, context).then(function (result) {
      test.deepEqual(result, ['override']);
    }).then(function () {
      // test for src/dest groupings
      extruder.map([{src:['input']}], function (source, dest) {
        return this.value;
      }, context).then(function (result) {
        test.deepEqual(result, [{src:['override']}]);
        test.done();
      });
    });
  },

  'allow changing context with reduce': function (test) {
    test.expect(2);

    var context = { value: 'override' };

    // test for source only arrays
    var result = extruder.reduce(['input'], function (source, dest) {
      return this.value;
    }, context).then(function (result) {
      test.deepEqual(result, 'override');
    }).then(function () {
      // test for src/dest groupings
      extruder.reduce([{src:['input']}], function (source, dest) {
        return this.value;
      }, context).then(function (result) {
        test.deepEqual(result, [{src:'override'}]);
        test.done();
      });
    });

  }
};
